include(qxtvars.prf)

DEPENDPATH      += $${QXT_INSTALL_HEADERS}
INCLUDEPATH     += $${QXT_INSTALL_HEADERS}

QMAKE_RPATHDIR  += $${QXT_INSTALL_LIBS}
macx:LIBS       += -F$${QXT_INSTALL_LIBS}
LIBS            += -L$${QXT_INSTALL_LIBS}

# this is just a copy from qt
defineTest(qxtQtAddLibrary) {
    INCLUDEPATH -= $$QMAKE_INCDIR_QT/$$1
    INCLUDEPATH = $$QMAKE_INCDIR_QT/$$1 $$INCLUDEPATH

    LIB_NAME = $$1
    unset(LINKAGE)
    mac {
       CONFIG(qt_framework, qt_framework|qt_no_framework) { #forced
          QMAKE_FRAMEWORKPATH *= $${QMAKE_LIBDIR_QT}
          FRAMEWORK_INCLUDE = $$QMAKE_LIBDIR_QT/$${LIB_NAME}.framework/Headers
          !qt_no_framework_direct_includes:exists($$FRAMEWORK_INCLUDE) {
             INCLUDEPATH -= $$FRAMEWORK_INCLUDE
             INCLUDEPATH = $$FRAMEWORK_INCLUDE $$INCLUDEPATH
           }
           LINKAGE = -framework $${LIB_NAME}$${QT_LIBINFIX}
        } else:!qt_no_framework { #detection
           for(frmwrk_dir, $$list($$QMAKE_LIBDIR_QT $$QMAKE_LIBDIR $$(DYLD_FRAMEWORK_PATH) /Library/Frameworks)) {
       	      exists($${frmwrk_dir}/$${LIB_NAME}.framework) {
                QMAKE_FRAMEWORKPATH *= $${frmwrk_dir}
    	        FRAMEWORK_INCLUDE = $$frmwrk_dir/$${LIB_NAME}.framework/Headers
    	        !qt_no_framework_direct_includes:exists($$FRAMEWORK_INCLUDE) {
    	          INCLUDEPATH -= $$FRAMEWORK_INCLUDE
    	          INCLUDEPATH = $$FRAMEWORK_INCLUDE $$INCLUDEPATH
                }
    	        LINKAGE = -framework $${LIB_NAME}
       	        break()
              }
           }
       }
    }
    symbian {
        isEqual(LIB_NAME, QtCore) {
            #workaround for dependency from f32file.h on e32svr.h which has moved location in symbian3
            INCLUDEPATH *= $$OS_LAYER_SYSTEMINCLUDE
        } else:isEqual(LIB_NAME, QtGui) {
            # Needed for #include <QtGui> because qs60mainapplication.h includes aknapp.h
            INCLUDEPATH *= $$MW_LAYER_SYSTEMINCLUDE
        } else:isEqual(LIB_NAME, QtWebKit) {
            # Needed for because relative inclusion problem in toolchain
            INCLUDEPATH *= $$QMAKE_INCDIR_QT/QtXmlPatterns
            INCLUDEPATH *= $$QMAKE_INCDIR_QT/QtNetwork
            isEmpty(TARGET.CAPABILITY): TARGET.CAPABILITY = NetworkServices
            isEmpty(TARGET.EPOCHEAPSIZE):TARGET.EPOCHEAPSIZE = 0x20000 0x2000000
        } else:isEqual(LIB_NAME, QtXmlPatterns) {
            # Needed for #include <QtXmlPatterns/QtXmlPatterns> because relative inclusion problem in toolchain
            INCLUDEPATH *= $$QMAKE_INCDIR_QT/QtNetwork
        } else:isEqual(LIB_NAME, QtNetwork) {
            isEmpty(TARGET.CAPABILITY): TARGET.CAPABILITY = NetworkServices
        } else:isEqual(LIB_NAME, QtDeclarative) {
            isEmpty(TARGET.CAPABILITY): TARGET.CAPABILITY = NetworkServices
            isEmpty(TARGET.EPOCHEAPSIZE):TARGET.EPOCHEAPSIZE = 0x20000 0x2000000
        }
        export(TARGET.EPOCHEAPSIZE)
        export(TARGET.CAPABILITY)
    }
    isEmpty(LINKAGE) {
       if(!debug_and_release|build_pass):CONFIG(debug, debug|release) {
           win32:LINKAGE = -l$${LIB_NAME}$${QT_LIBINFIX}d
           mac:LINKAGE = -l$${LIB_NAME}$${QT_LIBINFIX}_debug
       }
       isEmpty(LINKAGE):LINKAGE = -l$${LIB_NAME}$${QT_LIBINFIX}
    }
    !isEmpty(QMAKE_LSB) {
        QMAKE_LFLAGS *= --lsb-libpath=$$$$QMAKE_LIBDIR_QT
        QMAKE_LFLAGS *= -L/opt/lsb/lib
        QMAKE_LFLAGS *= --lsb-shared-libs=$${LIB_NAME}$${QT_LIBINFIX}
    }
    LIBS += $$LINKAGE
    export(LIBS)
    export(INCLUDEPATH)
    export(QMAKE_FRAMEWORKPATH)
    export(QMAKE_LFLAGS)
    return(true)
}


isEqual(QT_MAJOR_VERSION, 5) {
    defineTest(qxtAddLibrary) {
        qxtQtAddLibrary($$1)
    }
}
else {
    defineTest(qxtAddLibrary) {
        qtAddLibrary($$1)
    }
}


contains(QXT, berkeley) {
    contains(QXT_MODULES, berkeley):DEFINES += QXT_BERKELEY_LIB
    else:warning(Qxt was built without QxtBerkeley)

    DEPENDPATH       += $${QXT_INSTALL_HEADERS}/QxtBerkeley
    INCLUDEPATH      += $${QXT_INSTALL_HEADERS}/QxtBerkeley
    macx:INCLUDEPATH += $${QXT_INSTALL_LIBS}/QxtBerkeley.framework/HEADERS/

    qxtAddLibrary(QxtBerkeley)
    QXT += core
}

contains(QXT, web) {
    contains(QXT_MODULES, web):DEFINES += QXT_WEB_LIB
    else:warning(Qxt was built without QxtWeb)

    DEPENDPATH       += $${QXT_INSTALL_HEADERS}/QxtWeb
    INCLUDEPATH      += $${QXT_INSTALL_HEADERS}/QxtWeb
    macx:INCLUDEPATH += $${QXT_INSTALL_LIBS}/QxtWeb.framework/HEADERS/

    qxtAddLibrary(QxtWeb)
    QXT += core network
    QT  += network
}

contains(QXT, widgets) {
    contains(QXT_MODULES, widgets):DEFINES += QXT_WIDGETS_LIB QXT_GUI_LIB
    else:warning(Qxt was built without QxtWidgets)

    DEPENDPATH       += $${QXT_INSTALL_HEADERS}/QxtWidgets
    INCLUDEPATH      += $${QXT_INSTALL_HEADERS}/QxtWidgets
    macx:INCLUDEPATH += $${QXT_INSTALL_LIBS}/QxtWidgets.framework/HEADERS/

    qxtAddLibrary(QxtWidgets)
    QXT += core
	
	isEqual(QT_MAJOR_VERSION, 5) {
		QT += gui widgets
	} else {
		QT += gui
	}
}

contains(QXT, zeroconf) {
    contains(QXT_MODULES, zeroconf):DEFINES += QXT_ZEROCONF_LIB
    else:warning(Qxt was built without QxtZeroConf)

    DEPENDPATH       += $${QXT_INSTALL_HEADERS}/QxtZeroconf
    INCLUDEPATH      += $${QXT_INSTALL_HEADERS}/QxtZeroconf
    macx:INCLUDEPATH += $${QXT_INSTALL_LIBS}/QxtZeroconf.framework/HEADERS/

    qxtAddLibrary(QxtZeroconf)
    QXT += core network
    QT  += network
}

contains(QXT, network) {
    contains(QXT_MODULES, network):DEFINES += QXT_NETWORK_LIB
    else:warning(Qxt was built without QxtNetwork)

    DEPENDPATH       += $${QXT_INSTALL_HEADERS}/QxtNetwork
    INCLUDEPATH      += $${QXT_INSTALL_HEADERS}/QxtNetwork
    macx:INCLUDEPATH += $${QXT_INSTALL_LIBS}/QxtNetwork.framework/HEADERS/

    qxtAddLibrary(QxtNetwork)
    QXT += core
    QT  += network
}

contains(QXT, sql) {
    contains(QXT_MODULES, sql):DEFINES += QXT_SQL_LIB
    else:warning(Qxt was built without QxtSql)

    DEPENDPATH       += $${QXT_INSTALL_HEADERS}/QxtSql
    INCLUDEPATH      += $${QXT_INSTALL_HEADERS}/QxtSql
    macx:INCLUDEPATH += $${QXT_INSTALL_LIBS}/QxtSql.framework/HEADERS/

    qxtAddLibrary(QxtSql)
    QXT += core
    QT  += sql
}

contains(QXT, core) {
    contains(QXT_MODULES, core):DEFINES += QXT_CORE_LIB
    else:warning(Qxt was built without QxtCore)

    DEPENDPATH       += $${QXT_INSTALL_HEADERS}/QxtCore
    INCLUDEPATH      += $${QXT_INSTALL_HEADERS}/QxtCore
    macx:INCLUDEPATH += $${QXT_INSTALL_LIBS}/QxtCore.framework/HEADERS/

    qxtAddLibrary(QxtCore)
}
